generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma_client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  emailVerified  Boolean
  image          String?          @default("default.png")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  role           String           @default("USER")
  accounts       Account[]
  Chat           Chat[]
  Disease        Disease[]
  sensors        sensors?
  sessions       Session[]
  UserInfo       UserInfo?
  WearableSensor WearableSensor[]

  @@map("users")
}

model UserInfo {
  id          String   @id
  height      Float
  dateOfBirth DateTime
  phoneNumber String
  district    String   @default("area 1")
  user        User     @relation(fields: [id], references: [id])

  @@map("user_info")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Disease {
  id      String @id
  userId  String
  disease String
  user    User   @relation(fields: [userId], references: [id])

  @@map("disease")
}

model GasSensor {
  id               String    @id
  area             String
  created_at       DateTime  @default(now())
  last_maintenance DateTime?

  @@map("gas_sensor")
}

model gas_data {
  id        Int       @id @default(autoincrement())
  co2       Float?
  nh3       Float?
  alcohol   Float?
  toluene   Float?
  acetone   Float?
  lpg       Float?
  co        Float?
  smoke     Float?
  timestamp DateTime? @default(dbgenerated("(now() AT TIME ZONE 'Africa/Cairo'::text)")) @db.Timestamp(6)
  Chat      Chat[]
}

model health_data {
  id         Int       @id @default(autoincrement())
  heart_rate Int?
  spo2       Int?
  timestamp  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'Africa/Cairo'::text)")) @db.Timestamp(6)
  sensorid   String    @default("UNKNOWN")
}

model WearableSensor {
  id               String    @id
  userId           String
  created_at       DateTime  @default(now())
  last_maintenance DateTime?
  user             User      @relation(fields: [userId], references: [id])

  @@map("wearable_sensor")
}

model Chat {
  id            String    @id @default(cuid())
  text          String
  isUserMessage Boolean
  created_at    DateTime  @default(now())
  userId        String
  readingId     Int
  gas_dataId    Int?
  gas_data      gas_data? @relation(fields: [gas_dataId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@map("chat")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model new_health_data {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now()) @db.Timestamptz(6)
  heart_rate Int?
  spo2       Int?
  sensor_id  String?
  sensors    sensors? @relation(fields: [sensor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sensors {
  id              String            @id
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  user_id         String?           @unique
  new_health_data new_health_data[]
  users           User?             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
